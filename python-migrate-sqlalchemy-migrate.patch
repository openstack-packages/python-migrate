diff -Naur sqlalchemy-migrate-0.8.2.orig/migrate/tests/fixture/shell.py sqlalchemy-migrate-0.8.2/migrate/tests/fixture/shell.py
--- sqlalchemy-migrate-0.8.2.orig/migrate/tests/fixture/shell.py	2013-12-19 12:43:28.862668311 +0000
+++ sqlalchemy-migrate-0.8.2/migrate/tests/fixture/shell.py	2013-12-19 13:08:10.487109108 +0000
@@ -25,9 +25,9 @@
         )
 
     def run_version(self, repos_path):
-        result = self.env.run('migrate version %s' % repos_path)
+        result = self.env.run('sqlalchemy-migrate version %s' % repos_path)
         return int(result.stdout.strip())
 
     def run_db_version(self, url, repos_path):
-        result = self.env.run('migrate db_version %s %s' % (url, repos_path))
+        result = self.env.run('sqlalchemy-migrate db_version %s %s' % (url, repos_path))
         return int(result.stdout.strip())
diff -Naur sqlalchemy-migrate-0.8.2.orig/migrate/tests/versioning/test_shell.py sqlalchemy-migrate-0.8.2/migrate/tests/versioning/test_shell.py
--- sqlalchemy-migrate-0.8.2.orig/migrate/tests/versioning/test_shell.py	2013-12-19 12:43:28.865668350 +0000
+++ sqlalchemy-migrate-0.8.2/migrate/tests/versioning/test_shell.py	2013-12-19 13:08:10.488109123 +0000
@@ -20,15 +20,15 @@
 
     def test_help(self):
         """Displays default help dialog"""
-        self.assertEqual(self.env.run('migrate -h').returncode, 0)
-        self.assertEqual(self.env.run('migrate --help').returncode, 0)
-        self.assertEqual(self.env.run('migrate help').returncode, 0)
+        self.assertEqual(self.env.run('sqlalchemy-migrate -h').returncode, 0)
+        self.assertEqual(self.env.run('sqlalchemy-migrate --help').returncode, 0)
+        self.assertEqual(self.env.run('sqlalchemy-migrate help').returncode, 0)
 
     def test_help_commands(self):
         """Display help on a specific command"""
         # we can only test that we get some output
         for cmd in api.__all__:
-            result = self.env.run('migrate help %s' % cmd)
+            result = self.env.run('sqlalchemy-migrate help %s' % cmd)
             self.assertTrue(isinstance(result.stdout, basestring))
             self.assertTrue(result.stdout)
             self.assertFalse(result.stderr)
@@ -36,10 +36,10 @@
     def test_shutdown_logging(self):
         """Try to shutdown logging output"""
         repos = self.tmp_repos()
-        result = self.env.run('migrate create %s repository_name' % repos)
-        result = self.env.run('migrate version %s --disable_logging' % repos)
+        result = self.env.run('sqlalchemy-migrate create %s repository_name' % repos)
+        result = self.env.run('sqlalchemy-migrate version %s --disable_logging' % repos)
         self.assertEqual(result.stdout, '')
-        result = self.env.run('migrate version %s -q' % repos)
+        result = self.env.run('sqlalchemy-migrate version %s -q' % repos)
         self.assertEqual(result.stdout, '')
 
         # TODO: assert logging messages to 0
@@ -93,7 +93,7 @@
         repos = self.tmp_repos()
 
         # Creating a file that doesn't exist should succeed
-        result = self.env.run('migrate create %s repository_name' % repos)
+        result = self.env.run('sqlalchemy-migrate create %s repository_name' % repos)
 
         # Files should actually be created
         self.assert_(os.path.exists(repos))
@@ -103,35 +103,35 @@
         self.assertNotEquals(repos_.config.get('db_settings', 'version_table'), 'None')
 
         # Can't create it again: it already exists
-        result = self.env.run('migrate create %s repository_name' % repos,
+        result = self.env.run('sqlalchemy-migrate create %s repository_name' % repos,
             expect_error=True)
         self.assertEqual(result.returncode, 2)
     
     def test_script(self):
         """We can create a migration script via the command line"""
         repos = self.tmp_repos()
-        result = self.env.run('migrate create %s repository_name' % repos)
+        result = self.env.run('sqlalchemy-migrate create %s repository_name' % repos)
 
-        result = self.env.run('migrate script --repository=%s Desc' % repos)
+        result = self.env.run('sqlalchemy-migrate script --repository=%s Desc' % repos)
         self.assert_(os.path.exists('%s/versions/001_Desc.py' % repos))
 
-        result = self.env.run('migrate script More %s' % repos)
+        result = self.env.run('sqlalchemy-migrate script More %s' % repos)
         self.assert_(os.path.exists('%s/versions/002_More.py' % repos))
 
-        result = self.env.run('migrate script "Some Random name" %s' % repos)
+        result = self.env.run('sqlalchemy-migrate script "Some Random name" %s' % repos)
         self.assert_(os.path.exists('%s/versions/003_Some_Random_name.py' % repos))
 
     def test_script_sql(self):
         """We can create a migration sql script via the command line"""
         repos = self.tmp_repos()
-        result = self.env.run('migrate create %s repository_name' % repos)
+        result = self.env.run('sqlalchemy-migrate create %s repository_name' % repos)
 
-        result = self.env.run('migrate script_sql mydb foo %s' % repos)
+        result = self.env.run('sqlalchemy-migrate script_sql mydb foo %s' % repos)
         self.assert_(os.path.exists('%s/versions/001_foo_mydb_upgrade.sql' % repos))
         self.assert_(os.path.exists('%s/versions/001_foo_mydb_downgrade.sql' % repos))
 
         # Test creating a second
-        result = self.env.run('migrate script_sql postgres foo --repository=%s' % repos)
+        result = self.env.run('sqlalchemy-migrate script_sql postgres foo --repository=%s' % repos)
         self.assert_(os.path.exists('%s/versions/002_foo_postgres_upgrade.sql' % repos))
         self.assert_(os.path.exists('%s/versions/002_foo_postgres_downgrade.sql' % repos))
 
@@ -143,7 +143,7 @@
         self.assert_(not os.path.exists(script))
 
         # No attempt is made to verify correctness of the repository path here
-        result = self.env.run('migrate manage %s --repository=/bla/' % script)
+        result = self.env.run('sqlalchemy-migrate manage %s --repository=/bla/' % script)
         self.assert_(os.path.exists(script))
 
 
@@ -154,41 +154,41 @@
         """Create repository, python change script"""
         super(TestShellRepository, self).setUp()
         self.path_repos = self.tmp_repos()
-        result = self.env.run('migrate create %s repository_name' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate create %s repository_name' % self.path_repos)
 
     def test_version(self):
         """Correctly detect repository version"""
         # Version: 0 (no scripts yet); successful execution
-        result = self.env.run('migrate version --repository=%s' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate version --repository=%s' % self.path_repos)
         self.assertEqual(result.stdout.strip(), "0")
 
         # Also works as a positional param
-        result = self.env.run('migrate version %s' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate version %s' % self.path_repos)
         self.assertEqual(result.stdout.strip(), "0")
 
         # Create a script and version should increment
-        result = self.env.run('migrate script Desc %s' % self.path_repos)
-        result = self.env.run('migrate version %s' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate script Desc %s' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate version %s' % self.path_repos)
         self.assertEqual(result.stdout.strip(), "1")
 
     def test_source(self):
         """Correctly fetch a script's source"""
-        result = self.env.run('migrate script Desc --repository=%s' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate script Desc --repository=%s' % self.path_repos)
 
         filename = '%s/versions/001_Desc.py' % self.path_repos
         source = open(filename).read()
         self.assert_(source.find('def upgrade') >= 0)
 
         # Version is now 1
-        result = self.env.run('migrate version %s' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate version %s' % self.path_repos)
         self.assertEqual(result.stdout.strip(), "1")
 
         # Output/verify the source of version 1
-        result = self.env.run('migrate source 1 --repository=%s' % self.path_repos)
+        result = self.env.run('sqlalchemy-migrate source 1 --repository=%s' % self.path_repos)
         self.assertEqual(result.stdout.strip(), source.strip())
 
         # We can also send the source to a file... test that too
-        result = self.env.run('migrate source 1 %s --repository=%s' %
+        result = self.env.run('sqlalchemy-migrate source 1 %s --repository=%s' %
             (filename, self.path_repos))
         self.assert_(os.path.exists(filename))
         fd = open(filename)
@@ -208,17 +208,17 @@
         """Ensure we can set version control on a database"""
         path_repos = repos = self.tmp_repos()
         url = self.url
-        result = self.env.run('migrate create %s repository_name' % repos)
+        result = self.env.run('sqlalchemy-migrate create %s repository_name' % repos)
 
-        result = self.env.run('migrate drop_version_control %(url)s %(repos)s'\
+        result = self.env.run('sqlalchemy-migrate drop_version_control %(url)s %(repos)s'\
             % locals(), expect_error=True)
         self.assertEqual(result.returncode, 1)
-        result = self.env.run('migrate version_control %(url)s %(repos)s' % locals())
+        result = self.env.run('sqlalchemy-migrate version_control %(url)s %(repos)s' % locals())
 
         # Clean up
-        result = self.env.run('migrate drop_version_control %(url)s %(repos)s' % locals())
+        result = self.env.run('sqlalchemy-migrate drop_version_control %(url)s %(repos)s' % locals())
         # Attempting to drop vc from a database without it should fail
-        result = self.env.run('migrate drop_version_control %(url)s %(repos)s'\
+        result = self.env.run('sqlalchemy-migrate drop_version_control %(url)s %(repos)s'\
             % locals(), expect_error=True)
         self.assertEqual(result.returncode, 1)
 
@@ -227,41 +227,41 @@
         """Commands with default arguments set by manage.py"""
         path_repos = repos = self.tmp_repos()
         url = self.url
-        result = self.env.run('migrate create --name=repository_name %s' % repos)
-        result = self.env.run('migrate drop_version_control %(url)s %(repos)s' % locals(), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate create --name=repository_name %s' % repos)
+        result = self.env.run('sqlalchemy-migrate drop_version_control %(url)s %(repos)s' % locals(), expect_error=True)
         self.assertEqual(result.returncode, 1)
-        result = self.env.run('migrate version_control %(url)s %(repos)s' % locals())
+        result = self.env.run('sqlalchemy-migrate version_control %(url)s %(repos)s' % locals())
 
-        result = self.env.run('migrate drop_version_control %(url)s %(repos)s' % locals())
+        result = self.env.run('sqlalchemy-migrate drop_version_control %(url)s %(repos)s' % locals())
 
     @usedb()
     def test_version_control_specified(self):
         """Ensure we can set version control to a particular version"""
         path_repos = self.tmp_repos()
         url = self.url
-        result = self.env.run('migrate create --name=repository_name %s' % path_repos)
-        result = self.env.run('migrate drop_version_control %(url)s %(path_repos)s' % locals(), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate create --name=repository_name %s' % path_repos)
+        result = self.env.run('sqlalchemy-migrate drop_version_control %(url)s %(path_repos)s' % locals(), expect_error=True)
         self.assertEqual(result.returncode, 1)
 
         # Fill the repository
         path_script = self.tmp_py()
         version = 2
         for i in range(version):
-            result = self.env.run('migrate script Desc --repository=%s' % path_repos)
+            result = self.env.run('sqlalchemy-migrate script Desc --repository=%s' % path_repos)
 
         # Repository version is correct
-        result = self.env.run('migrate version %s' % path_repos)
+        result = self.env.run('sqlalchemy-migrate version %s' % path_repos)
         self.assertEqual(result.stdout.strip(), str(version))
 
         # Apply versioning to DB
-        result = self.env.run('migrate version_control %(url)s %(path_repos)s %(version)s' % locals())
+        result = self.env.run('sqlalchemy-migrate version_control %(url)s %(path_repos)s %(version)s' % locals())
 
         # Test db version number (should start at 2)
-        result = self.env.run('migrate db_version %(url)s %(path_repos)s' % locals())
+        result = self.env.run('sqlalchemy-migrate db_version %(url)s %(path_repos)s' % locals())
         self.assertEqual(result.stdout.strip(), str(version))
 
         # Clean up
-        result = self.env.run('migrate drop_version_control %(url)s %(path_repos)s' % locals())
+        result = self.env.run('sqlalchemy-migrate drop_version_control %(url)s %(path_repos)s' % locals())
 
     @usedb()
     def test_upgrade(self):
@@ -269,67 +269,67 @@
         # Create a repository
         repos_name = 'repos_name'
         repos_path = self.tmp()
-        result = self.env.run('migrate create %(repos_path)s %(repos_name)s' % locals())
+        result = self.env.run('sqlalchemy-migrate create %(repos_path)s %(repos_name)s' % locals())
         self.assertEqual(self.run_version(repos_path), 0)
 
         # Version the DB
-        result = self.env.run('migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
-        result = self.env.run('migrate version_control %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate version_control %s %s' % (self.url, repos_path))
 
         # Upgrades with latest version == 0
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
-        result = self.env.run('migrate upgrade %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
-        result = self.env.run('migrate upgrade %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
-        result = self.env.run('migrate upgrade %s %s 1' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s 1' % (self.url, repos_path), expect_error=True)
         self.assertEqual(result.returncode, 1)
-        result = self.env.run('migrate upgrade %s %s -1' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s -1' % (self.url, repos_path), expect_error=True)
         self.assertEqual(result.returncode, 2)
 
         # Add a script to the repository; upgrade the db
-        result = self.env.run('migrate script Desc --repository=%s' % (repos_path))
+        result = self.env.run('sqlalchemy-migrate script Desc --repository=%s' % (repos_path))
         self.assertEqual(self.run_version(repos_path), 1)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
 
         # Test preview
-        result = self.env.run('migrate upgrade %s %s 0 --preview_sql' % (self.url, repos_path))
-        result = self.env.run('migrate upgrade %s %s 0 --preview_py' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s 0 --preview_sql' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s 0 --preview_py' % (self.url, repos_path))
 
-        result = self.env.run('migrate upgrade %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_db_version(self.url, repos_path), 1)
         
         # Downgrade must have a valid version specified
-        result = self.env.run('migrate downgrade %s %s' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate downgrade %s %s' % (self.url, repos_path), expect_error=True)
         self.assertEqual(result.returncode, 2)
-        result = self.env.run('migrate downgrade %s %s -1' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate downgrade %s %s -1' % (self.url, repos_path), expect_error=True)
         self.assertEqual(result.returncode, 2)
-        result = self.env.run('migrate downgrade %s %s 2' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate downgrade %s %s 2' % (self.url, repos_path), expect_error=True)
         self.assertEqual(result.returncode, 2)
         self.assertEqual(self.run_db_version(self.url, repos_path), 1)
         
-        result = self.env.run('migrate downgrade %s %s 0' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate downgrade %s %s 0' % (self.url, repos_path))
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
         
-        result = self.env.run('migrate downgrade %s %s 1' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate downgrade %s %s 1' % (self.url, repos_path), expect_error=True)
         self.assertEqual(result.returncode, 2)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
 
-        result = self.env.run('migrate drop_version_control %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate drop_version_control %s %s' % (self.url, repos_path))
 
     def _run_test_sqlfile(self, upgrade_script, downgrade_script):
         # TODO: add test script that checks if db really changed
         repos_path = self.tmp()
         repos_name = 'repos'
 
-        result = self.env.run('migrate create %s %s' % (repos_path, repos_name))
-        result = self.env.run('migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
-        result = self.env.run('migrate version_control %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate create %s %s' % (repos_path, repos_name))
+        result = self.env.run('sqlalchemy-migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate version_control %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_version(repos_path), 0)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
 
         beforeCount = len(os.listdir(os.path.join(repos_path, 'versions')))  # hmm, this number changes sometimes based on running from svn
-        result = self.env.run('migrate script_sql %s --repository=%s' % ('postgres', repos_path))
+        result = self.env.run('sqlalchemy-migrate script_sql %s --repository=%s' % ('postgres', repos_path))
         self.assertEqual(self.run_version(repos_path), 1)
         self.assertEqual(len(os.listdir(os.path.join(repos_path, 'versions'))), beforeCount + 2)
 
@@ -339,11 +339,11 @@
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
         self.assertRaises(Exception, self.engine.text('select * from t_table').execute)
 
-        result = self.env.run('migrate upgrade %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate upgrade %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_db_version(self.url, repos_path), 1)
         self.engine.text('select * from t_table').execute()
 
-        result = self.env.run('migrate downgrade %s %s 0' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate downgrade %s %s 0' % (self.url, repos_path))
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
         self.assertRaises(Exception, self.engine.text('select * from t_table').execute)
 
@@ -383,15 +383,15 @@
         repos_name = 'repos_name'
         repos_path = self.tmp()
 
-        result = self.env.run('migrate create repository_name --repository=%s' % repos_path)
-        result = self.env.run('migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
-        result = self.env.run('migrate version_control %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate create repository_name --repository=%s' % repos_path)
+        result = self.env.run('sqlalchemy-migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate version_control %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_version(repos_path), 0)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
 
         # Empty script should succeed
-        result = self.env.run('migrate script Desc %s' % repos_path)
-        result = self.env.run('migrate test %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate script Desc %s' % repos_path)
+        result = self.env.run('sqlalchemy-migrate test %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_version(repos_path), 1)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
 
@@ -413,7 +413,7 @@
         file.write(script_text)
         file.close()
 
-        result = self.env.run('migrate test %s %s bla' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate test %s %s bla' % (self.url, repos_path), expect_error=True)
         self.assertEqual(result.returncode, 2)
         self.assertEqual(self.run_version(repos_path), 1)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
@@ -444,7 +444,7 @@
         file = open(script_path, 'w')
         file.write(script_text)
         file.close()
-        result = self.env.run('migrate test %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate test %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_version(repos_path), 1)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
         
@@ -464,19 +464,19 @@
         self.meta.reflect()
         self.meta.drop_all()  # in case junk tables are lying around in the test database
 
-        result = self.env.run('migrate create %s %s' % (repos_path, repos_name))
-        result = self.env.run('migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
-        result = self.env.run('migrate version_control %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate create %s %s' % (repos_path, repos_name))
+        result = self.env.run('sqlalchemy-migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate version_control %s %s' % (self.url, repos_path))
         self.assertEqual(self.run_version(repos_path), 0)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)
 
         # Setup helper script.
-        result = self.env.run('migrate manage %s --repository=%s --url=%s --model=%s'\
+        result = self.env.run('sqlalchemy-migrate manage %s --repository=%s --url=%s --model=%s'\
             % (script_path, repos_path, self.url, model_module))
         self.assert_(os.path.exists(script_path))
 
         # Model is defined but database is empty.
-        result = self.env.run('migrate compare_model_to_db %s %s --model=%s' \
+        result = self.env.run('sqlalchemy-migrate compare_model_to_db %s %s --model=%s' \
             % (self.url, repos_path, model_module))
         self.assert_("tables missing from database: tmp_account_rundiffs" in result.stdout)
 
@@ -486,7 +486,7 @@
         else:
             warnings = None
         self.env.environ['PYTHONWARNINGS'] = 'default'
-        result = self.env.run('migrate compare_model_to_db %s %s --model=%s' \
+        result = self.env.run('sqlalchemy-migrate compare_model_to_db %s %s --model=%s' \
             % (self.url, repos_path, model_module.replace(":", ".")), expect_error=True)
         if warnings == None:
             del(self.env.environ['PYTHONWARNINGS'])
@@ -498,19 +498,19 @@
         self.assert_("tables missing from database: tmp_account_rundiffs" in result.stdout)
 
         # Update db to latest model.
-        result = self.env.run('migrate update_db_from_model %s %s %s'\
+        result = self.env.run('sqlalchemy-migrate update_db_from_model %s %s %s'\
             % (self.url, repos_path, model_module))
         self.assertEqual(self.run_version(repos_path), 0)
         self.assertEqual(self.run_db_version(self.url, repos_path), 0)  # version did not get bumped yet because new version not yet created
 
-        result = self.env.run('migrate compare_model_to_db %s %s %s'\
+        result = self.env.run('sqlalchemy-migrate compare_model_to_db %s %s %s'\
             % (self.url, repos_path, model_module))
         self.assert_("No schema diffs" in result.stdout)
 
-        result = self.env.run('migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
-        result = self.env.run('migrate version_control %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate drop_version_control %s %s' % (self.url, repos_path), expect_error=True)
+        result = self.env.run('sqlalchemy-migrate version_control %s %s' % (self.url, repos_path))
 
-        result = self.env.run('migrate create_model %s %s' % (self.url, repos_path))
+        result = self.env.run('sqlalchemy-migrate create_model %s %s' % (self.url, repos_path))
         temp_dict = dict()
         exec result.stdout in temp_dict
 
@@ -524,10 +524,10 @@
   ##Column('passwd', String(length=None, convert_unicode=False, assert_unicode=None))""" in result.stdout)
 
         ## We're happy with db changes, make first db upgrade script to go from version 0 -> 1.
-        #result = self.env.run('migrate make_update_script_for_model', expect_error=True)
+        #result = self.env.run('sqlalchemy-migrate make_update_script_for_model', expect_error=True)
         #self.assertTrue('Not enough arguments' in result.stderr)
 
-        #result_script = self.env.run('migrate make_update_script_for_model %s %s %s %s'\
+        #result_script = self.env.run('sqlalchemy-migrate make_update_script_for_model %s %s %s %s'\
             #% (self.url, repos_path, old_model_module, model_module))
         #self.assertEqualIgnoreWhitespace(result_script.stdout,
         #'''from sqlalchemy import *
@@ -554,11 +554,11 @@
             #tmp_account_rundiffs.drop()''')
     
         ## Save the upgrade script.
-        #result = self.env.run('migrate script Desc %s' % repos_path)
+        #result = self.env.run('sqlalchemy-migrate script Desc %s' % repos_path)
         #upgrade_script_path = '%s/versions/001_Desc.py' % repos_path
         #open(upgrade_script_path, 'w').write(result_script.stdout)
 
-        #result = self.env.run('migrate compare_model_to_db %s %s %s'\
+        #result = self.env.run('sqlalchemy-migrate compare_model_to_db %s %s %s'\
             #% (self.url, repos_path, model_module))
         #self.assert_("No schema diffs" in result.stdout)
 
diff -Naur sqlalchemy-migrate-0.8.2.orig/setup.cfg sqlalchemy-migrate-0.8.2/setup.cfg
--- sqlalchemy-migrate-0.8.2.orig/setup.cfg	2013-11-15 18:37:30.000000000 +0000
+++ sqlalchemy-migrate-0.8.2/setup.cfg	2013-12-19 13:09:24.184242821 +0000
@@ -23,8 +23,8 @@
 
 [entry_points]
 console_scripts = 
-	migrate = migrate.versioning.shell:main
-	migrate-repository = migrate.versioning.migrate_repository:main
+	sqlalchemy-migrate = migrate.versioning.shell:main
+	sqlalchemy-migrate-repository = migrate.versioning.migrate_repository:main
 
 [build_sphinx]
 all_files = 1
